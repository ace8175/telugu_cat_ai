import streamlit as st
import asyncio
import os
from datetime import datetime
import base64
import io
from gtts import gTTS
import tempfile
import uuid
import sys
from config import SUPABASE_URL, SUPABASE_KEY

from database import Database
from ai_services import TeluguAI
from news_service import NewsService
from utils import *

# Page configuration
st.set_page_config(
    page_title="Telugu AI Assistant",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize services
@st.cache_resource
def init_services():
    try:
        db = Database(SUPABASE_URL, SUPABASE_KEY)
        ai = TeluguAI()  # or pass keys if needed
        news = NewsService()
        return db, ai, news
    except Exception as e:
        st.error(f"Error initializing services: {e}")
        return None, None, None

def generate_tts_fixed(text, lang='te'):
    """Generate Text-to-Speech audio with better error handling"""
    try:
        if not text or len(text.strip()) == 0:
            return None
        
        # Create gTTS object
        tts = gTTS(text=text, lang=lang, slow=False)
        
        # Use BytesIO instead of temp file to avoid file access issues
        audio_buffer = io.BytesIO()
        tts.write_to_fp(audio_buffer)
        audio_buffer.seek(0)
        
        return audio_buffer.getvalue()
        
    except Exception as e:
        print(f"TTS Error: {str(e)}")
        st.warning("‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞î‡∞ü‡±ç‚Äå‡∞™‡±Å‡∞ü‡±ç ‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§‡∞Ç ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞≤‡±á‡∞¶‡±Å.")
        return None

def chat_interface(db, ai):
    st.title("üí¨ Telugu Chat Assistant")
    st.write("Telugu ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å English ‡∞∞‡±Ü‡∞Ç‡∞°‡±Å ‡∞≠‡∞æ‡∞∑‡∞≤‡∞≤‡±ã ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø - AI ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã ‡∞ú‡∞µ‡∞æ‡∞¨‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø")
    
    # Initialize chat history
    if 'messages' not in st.session_state:
        st.session_state.messages = []
        if hasattr(st.session_state, 'save_history') and st.session_state.save_history:
            # Load chat history from database
            try:
                history = db.get_chat_history(st.session_state.user_id)
                st.session_state.messages = history
            except:
                st.session_state.messages = []
    
    # Display chat messages
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            if message.get("audio_file"):
                try:
                    st.audio(message["audio_file"])
                except:
                    pass  # Skip audio if there's an issue
    
    # Chat input with better handling
    prompt = st.chat_input("Telugu ‡∞≤‡±á‡∞¶‡∞æ English ‡∞≤‡±ã ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø...")
    
    if prompt:
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # Display user message
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Generate AI response
        with st.chat_message("assistant"):
            with st.spinner("‡∞Ü‡∞≤‡±ã‡∞ö‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å..."):
                try:
                    response = ai.generate_response(prompt)
                    st.markdown(response)
                    
                    # Generate TTS audio if voice output is enabled
                    audio_file = None
                    if hasattr(st.session_state, 'voice_output') and st.session_state.get('voice_output', True):
                        audio_file = generate_tts_fixed(response, lang='te')
                        if audio_file:
                            st.audio(audio_file)
                    
                    # Add assistant response
                    st.session_state.messages.append({
                        "role": "assistant", 
                        "content": response,
                        "audio_file": audio_file
                    })
                    
                    # Save to database if enabled
                    if hasattr(st.session_state, 'save_history') and st.session_state.save_history:
                        try:
                            db.save_chat_message(
                                st.session_state.user_id,
                                prompt,
                                response,
                                base64.b64encode(audio_file).decode() if audio_file else None
                            )
                        except Exception as e:
                            print(f"Error saving chat: {e}")
                
                except Exception as e:
                    error_response = "‡∞ï‡±ç‡∞∑‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§‡∞Ç ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø ‡∞â‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø."
                    st.markdown(error_response)
                    st.session_state.messages.append({
                        "role": "assistant", 
                        "content": error_response
                    })

def news_interface(news):
    st.title("üì∞ Telugu News Summary")
    st.write("‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤ ‡∞∏‡∞Ç‡∞ï‡±ç‡∞∑‡∞ø‡∞™‡±ç‡∞§ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç")
    
    # Create columns for refresh button and status
    col1, col2 = st.columns([1, 3])
    
    with col1:
        if st.button("üîÑ Refresh News", type="primary"):
            st.session_state.news_loading = True
    
    # Load news
    if st.button("üì• Load Latest News", type="secondary") or 'news_data' not in st.session_state:
        with st.spinner("‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å ‡∞§‡±Ü‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Æ‡±Å..."):
            try:
                news_data = news.get_telugu_news()
                st.session_state.news_data = news_data
                st.success(f"‚úÖ {len(news_data)} ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å ‡∞≤‡±ã‡∞°‡±ç ‡∞Ö‡∞Ø‡±ç‡∞Ø‡∞æ‡∞Ø‡∞ø")
            except Exception as e:
                st.error(f"‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å ‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç‡∞≤‡±ã ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø: {e}")
                st.session_state.news_data = []
    
    # Display news
    if 'news_data' in st.session_state and st.session_state.news_data:
        st.subheader(f"üìà ‡∞§‡∞æ‡∞ú‡∞æ ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å ({len(st.session_state.news_data)})")
        
        for idx, article in enumerate(st.session_state.news_data[:8]):  # Show top 8 articles
            with st.expander(f"üì∞ {article['title'][:80]}..."):
                
                # Article content
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(f"**‡∞∏‡∞æ‡∞∞‡∞æ‡∞Ç‡∞∂‡∞Ç:** {article['summary']}")
                    st.write(f"**‡∞Æ‡±Ç‡∞≤‡∞Ç:** {article['source']}")
                    st.write(f"**‡∞∏‡∞Æ‡∞Ø‡∞Ç:** {article['published']}")
                
                with col2:
                    # Listen button for TTS
                    if st.button(f"üîä ‡∞µ‡∞ø‡∞®‡∞Ç‡∞°‡∞ø", key=f"listen_{idx}"):
                        with st.spinner("‡∞Ü‡∞°‡∞ø‡∞Ø‡±ã ‡∞§‡∞Ø‡∞æ‡∞∞‡±Å ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Ç..."):
                            audio_file = generate_tts_fixed(article['summary'], lang='te')
                            if audio_file:
                                st.audio(audio_file)
                            else:
                                st.warning("‡∞Ü‡∞°‡∞ø‡∞Ø‡±ã ‡∞§‡∞Ø‡∞æ‡∞∞‡±Å ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç‡∞≤‡±ã ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø")
                    
                    # Read more link
                    if article.get('link') and article['link'] != '#':
                        st.markdown(f"[üìñ ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø‡∞ó‡∞æ ‡∞ö‡∞¶‡∞µ‡∞Ç‡∞°‡∞ø]({article['link']})")
    
    else:
        st.info("‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å ‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø 'Load Latest News' ‡∞¨‡∞ü‡∞®‡±ç ‡∞®‡±ä‡∞ï‡±ç‡∞ï‡∞Ç‡∞°‡∞ø")

def main():
    # Load custom CSS
    st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Telugu:wght@400;600;700&display=swap');
    
    .telugu-text, .stMarkdown, .stTextInput input, .stChatMessage {
        font-family: 'Noto Sans Telugu', sans-serif !important;
        font-size: 16px !important;
        line-height: 1.6;
    }
    
    .chat-message {
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 10px;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Initialize services
    db, ai, news = init_services()
    
    if not db or not ai or not news:
        st.error("üö´ ‡∞∏‡±á‡∞µ‡∞≤‡±Å ‡∞≤‡±ã‡∞°‡±ç ‡∞ï‡∞æ‡∞≤‡±á‡∞¶‡±Å. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞™‡±á‡∞ú‡±Ä ‡∞∞‡∞ø‡∞´‡±ç‡∞∞‡±Ü‡∞∑‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.")
        return
    
    # Sidebar
    with st.sidebar:
        st.title("ü§ñ Telugu AI Assistant")
        st.markdown("---")
        
        # User Authentication
        if 'user_id' not in st.session_state:
            st.subheader("üîê Login / Sign Up")
            
            # Toggle between login and signup
            auth_mode = st.radio("Choose Action:", ["Login", "Sign Up"])
            
            email = st.text_input("üìß Email")
            password = st.text_input("üîí Password", type="password")
            
            if auth_mode == "Login":
                if st.button("üöÄ Login", type="primary", use_container_width=True):
                    if email and password:
                        try:
                            user = db.authenticate_user(email, password)
                            if user:
                                st.session_state.user_id = user['id']
                                st.session_state.user_email = email
                                st.session_state.save_history = True
                                st.session_state.voice_output = True
                                st.success("‚úÖ ‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç!")
                                st.rerun()
                            else:
                                st.error("‚ùå ‡∞§‡∞™‡±ç‡∞™‡±Å ‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞≤‡±á‡∞¶‡∞æ ‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç")
                        except Exception as e:
                            st.error(f"‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç ‡∞é‡∞∞‡±ç‡∞∞‡∞∞‡±ç: {e}")
                    else:
                        st.warning("‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç ‡∞é‡∞Ç‡∞ü‡∞∞‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")
            
            else:  # Sign Up
                if st.button("üìù Create Account", type="primary", use_container_width=True):
                    if email and password:
                        if len(password) < 6:
                            st.error("‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç ‡∞ï‡∞®‡±Ä‡∞∏‡∞Ç 6 ‡∞Ö‡∞ï‡±ç‡∞∑‡∞∞‡∞æ‡∞≤‡±Å ‡∞â‡∞Ç‡∞°‡∞æ‡∞≤‡∞ø")
                        else:
                            try:
                                user_id = db.create_user(email, password)
                                if user_id:
                                    st.session_state.user_id = user_id
                                    st.session_state.user_email = email
                                    st.session_state.save_history = True
                                    st.session_state.voice_output = True
                                    st.success("‚úÖ ‡∞Ö‡∞ï‡±å‡∞Ç‡∞ü‡±ç ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø!")
                                    st.rerun()
                                else:
                                    st.error("‚ùå ‡∞à ‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞Ç‡∞≤‡±ã ‡∞â‡∞Ç‡∞¶‡∞ø")
                            except Exception as e:
                                st.error(f"‡∞∏‡±à‡∞®‡±ç‡∞Ö‡∞™‡±ç ‡∞é‡∞∞‡±ç‡∞∞‡∞∞‡±ç: {e}")
                    else:
                        st.warning("‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç ‡∞é‡∞Ç‡∞ü‡∞∞‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")
            
        else:
            # User is logged in
            st.success(f"üôè ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç!\n**{st.session_state.user_email}**")
            st.markdown("---")
            
            # Settings
            st.subheader("‚öôÔ∏è Settings")
            
            # Chat history toggle
            save_history = st.toggle(
                "üíæ Save Chat History", 
                value=st.session_state.get('save_history', True),
                help="‡∞ö‡∞æ‡∞ü‡±ç ‡∞ö‡∞∞‡∞ø‡∞§‡±ç‡∞∞‡∞®‡±Å ‡∞°‡±á‡∞ü‡∞æ‡∞¨‡±á‡∞∏‡±ç‚Äå‡∞≤‡±ã ‡∞∏‡±á‡∞µ‡±ç ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡∞æ?"
            )
            st.session_state.save_history = save_history
            
            # Voice settings
            st.subheader("üîä Voice Settings")
            
            voice_output = st.toggle(
                "üîä Voice Output", 
                value=st.session_state.get('voice_output', True),
                help="AI ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞æ‡∞≤‡∞®‡±Å ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç‚Äå‡∞≤‡±ã ‡∞µ‡∞ø‡∞®‡∞æ‡∞≤‡∞æ?"
            )
            st.session_state.voice_output = voice_output
            
            st.markdown("---")
            
            # Logout button
            if st.button("üö™ Logout", type="secondary", use_container_width=True):
                # Clear all session state
                for key in list(st.session_state.keys()):
                    del st.session_state[key]
                st.rerun()
    
    # Main content
    if 'user_id' in st.session_state:
        # Create tabs for different features
        tab1, tab2, tab3 = st.tabs(["üí¨ Chat", "üì∞ News", "üë§ Profile"])
        
        with tab1:
            chat_interface(db, ai)
        
        with tab2:
            news_interface(news)
        
        with tab3:
            profile_interface(db)
    
    else:
        # Welcome screen for non-logged-in users
        st.markdown("""
        # ü§ñ Telugu AI Assistant ‡∞ï‡∞ø ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç!
        
        ### ‚ú® Features:
        - **üí¨ Telugu & English Chat** - ‡∞∞‡±Ü‡∞Ç‡∞°‡±Å ‡∞≠‡∞æ‡∞∑‡∞≤‡∞≤‡±ã ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞Ç‡∞°‡∞ø
        - **üîä Voice Output** - ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã ‡∞µ‡∞ø‡∞®‡∞Ç‡∞°‡∞ø  
        - **üì∞ Telugu News** - ‡∞§‡∞æ‡∞ú‡∞æ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å
        - **üîí Secure** - ‡∞Æ‡±Ä ‡∞°‡±á‡∞ü‡∞æ ‡∞∏‡±Å‡∞∞‡∞ï‡±ç‡∞∑‡∞ø‡∞§‡∞Ç
        - **üì± Mobile Friendly** - ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞™‡∞∞‡∞ø‡∞ï‡∞∞‡∞æ‡∞≤‡∞≤‡±ã ‡∞µ‡∞æ‡∞°‡∞Ç‡∞°‡∞ø
        
        ### üöÄ ‡∞™‡±ç‡∞∞‡∞æ‡∞∞‡∞Ç‡∞≠‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø:
        1. **‡∞∏‡±à‡∞°‡±ç‚Äå‡∞¨‡∞æ‡∞∞‡±ç‚Äå‡∞≤‡±ã ‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø** ‡∞≤‡±á‡∞¶‡∞æ **‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞Ö‡∞ï‡±å‡∞Ç‡∞ü‡±ç ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø**
        2. **Chat ‡∞ü‡∞æ‡∞¨‡±ç‚Äå‡∞≤‡±ã** ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞≤‡±á‡∞¶‡∞æ ‡∞á‡∞Ç‡∞ó‡±ç‡∞≤‡±Ä‡∞∑‡±ç‚Äå‡∞≤‡±ã ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø
        3. **News ‡∞ü‡∞æ‡∞¨‡±ç‚Äå‡∞≤‡±ã** ‡∞§‡∞æ‡∞ú‡∞æ ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å ‡∞ö‡±Ç‡∞°‡∞Ç‡∞°‡∞ø
        
        ---
        *Made with ‚ù§Ô∏è for Telugu speakers*
        """)
        
        # Demo section
        st.subheader("üéØ Demo Conversation:")
        
        demo_messages = [
            {"role": "user", "content": "Hello, how are you?"},
            {"role": "assistant", "content": "‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç! ‡∞®‡±á‡∞®‡±Å ‡∞¨‡∞æ‡∞ó‡∞æ‡∞®‡±á ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å, ‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å! ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞é‡∞≤‡∞æ ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å? ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞é‡∞≤‡∞æ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å?"},
            {"role": "user", "content": "‡∞Æ‡±Ä‡∞∞‡±Å ‡∞è‡∞Æ‡∞ø ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞∞‡±Å?"},
            {"role": "assistant", "content": "‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞Ö‡∞®‡±á‡∞ï ‡∞µ‡∞ø‡∞ß‡∞æ‡∞≤‡±Å‡∞ó‡∞æ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å:\n- ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞á‡∞Ç‡∞ó‡±ç‡∞≤‡±Ä‡∞∑‡±ç ‡∞∞‡±Ü‡∞Ç‡∞°‡±Å ‡∞≠‡∞æ‡∞∑‡∞≤‡∞≤‡±ã ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞ó‡∞≤‡∞®‡±Å\n- ‡∞§‡∞æ‡∞ú‡∞æ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞ó‡∞≤‡∞®‡±Å\n- ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞≤‡∞ï‡±Å ‡∞ú‡∞µ‡∞æ‡∞¨‡±Å‡∞≤‡±Å ‡∞á‡∞µ‡±ç‡∞µ‡∞ó‡∞≤‡∞®‡±Å\n- ‡∞∏‡∞≤‡∞π‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞Ö‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞ó‡∞≤‡∞®‡±Å"}
        ]
        
        for message in demo_messages:
            with st.chat_message(message["role"]):
                st.write(message["content"])

def profile_interface(db):
    st.title("üë§ User Profile")
    
    try:
        user_stats = db.get_user_stats(st.session_state.user_id)
        
        # Display stats in columns
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                label="üí¨ Total Messages", 
                value=user_stats.get('total_messages', 0)
            )
        
        with col2:
            st.metric(
                label="üìÖ Days Active", 
                value=user_stats.get('days_active', 0)
            )
        
        with col3:
            st.metric(
                label="üì∞ News Read", 
                value=user_stats.get('news_read', 0)
            )
        
        st.markdown("---")
        
        # Account management
        st.subheader("üîß Account Management")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üóëÔ∏è Clear Chat History", type="secondary"):
                try:
                    db.clear_chat_history(st.session_state.user_id)
                    st.session_state.messages = []
                    st.success("‚úÖ ‡∞ö‡∞æ‡∞ü‡±ç ‡∞ö‡∞∞‡∞ø‡∞§‡±ç‡∞∞ ‡∞ï‡±ç‡∞≤‡∞ø‡∞Ø‡∞∞‡±ç ‡∞Ö‡∞Ø‡∞ø‡∞Ç‡∞¶‡∞ø!")
                except Exception as e:
                    st.error(f"‚ùå ‡∞é‡∞∞‡±ç‡∞∞‡∞∞‡±ç: {e}")
        
        with col2:
            if st.button("üìÅ Export Chat Data", type="secondary"):
                st.info("‡∞à ‡∞´‡±Ä‡∞ö‡∞∞‡±ç ‡∞§‡±ç‡∞µ‡∞∞‡∞≤‡±ã ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø")
        
        # User preferences
        st.subheader("‚öôÔ∏è Preferences")
        
        st.write("**Current Settings:**")
        st.write(f"- Save Chat History: {'‚úÖ Yes' if st.session_state.get('save_history', True) else '‚ùå No'}")
        st.write(f"- Voice Output: {'üîä Enabled' if st.session_state.get('voice_output', True) else 'üîá Disabled'}")
        st.write(f"- Account: {st.session_state.user_email}")
        
    except Exception as e:
        st.error(f"‡§™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç ‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç‡∞≤‡±ã ‡∞é‡∞∞‡±ç‡∞∞‡∞∞‡±ç: {e}")

if __name__ == "__main__":
    main()